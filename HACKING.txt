
====== Classes ======

Each class has inline documentation, use pydoc to view it.

zim					# Command line parsing and application class
|-- Application()
|-- gui				# Gtk interface - TODO
|   |-- GUI(Application)
|   `-- ...
|-- www				# WWW interface for server / cgi-bin
|   `-- WWW(Application)
|-- notebook		# Interface to a single notebook
|   |-- Notebook()
|   |-- Page()
|   `-- Namespace()
|-- stores			# Data backends for notebooks
|   |-- files
|   |-- gjots
|   `-- memory
|-- templates
|   `-- Template()
|-- formats			# Parsers for various source formats
|   |-- html
|   |-- plain
|   `-- wiki
|-- fs				# File system objects
|   |-- Path()
|   |-- File(Path)
|   |-- Dir(Path)
|   `-- Buffer(StringIO)
`-- utils			# Coding utilities

Both gui and www inherit from the application class defined in zim.
This class takes care of loading configuration files, plugins etc.
The Notebook object takes care of accessing and storing pages and
other data in the notebook. Each notebook can consist of one or more
store objects which implement the actual data backend.


====== TODO ======

**Grep for TODO and FIXME tags in the code**

== General health ==

* how to pacakge zim executable (zim.py) and zim/ directory ?
* Make zim.py also accept files as notebook types (e.g. gjots, .tar.gz etc)
* Wrapper for coverage.py to generate dir with html highlighting

== Getting server up and running ==

* Resolving files
	* Needs testing + testing for new FS methods
	* Needs security mode for www
* Resolving pages
	* Need test for Notebook.resolve_page() with lots of scenarios
* Templates need setting to remove title from tree
	* Used e.g. in Presentation template to put title in separate bar
* Templates need setting to change the heading level
	* need test for ParseTree.cleanup_headings()
* For S5 template need to split body on H1 or HR
	* FOREACH slide IN page.sections
	* want to be able to cleanup headings per slide...
* Base class for both gui and www which takes care of config, plugins etc.
	* Also use this in zim.py when exporting etc.
	* Have objects for config sets like preferences and notebook state
	* Does a method like "data_dirs" also belong here ? No - control through env
* Event framework, both for application and notebook - needed for plugins
* Check client hostname and add a --public option (default localhost only)
* Implement editing from www (default is read-only)
* Search interface ?

== Towards full capabilities ==

* parse List nodes into parse tree
	* Implement checkbox lists
* Implement moving pages
	* Logic for updating links
	* Include sub pages and attachments
* PluginManager class
    * Plugins get notebook and gui as parameters to the constructor
    * The gui object can either be gtk or www or not present
    * Each plugin object should have a method unplug()
    * The PluginManager keeps references to the plugin objects
* Backward compatibility with older zim versions
    * Wiki pages without headers use indented paragraphs for Verbatim
	* Resolve file should also check same dir as page source
* Txt2tags Parser (and Dumper ?) class
    * Plugin to use txt2tags for multitude of output formats
* Notebook cache based on sqlite
    * Make sure to test all store backends both with and without cache
    * Make sure not to auto-vivicate cache to quickly
* Store type for reading from .tar.gz files

=== file links for www ===

When serving:
* attachments should be served - link needs to be from server root
* files under doc root (if any) should be served - idem
* all other files get linked as file:/// urls

When exporting:
* attachments should be copied - link should be reative file path from html file
* doc root never needs to be copied, absolute path or use doc_root url setting
* other files maybe copied or linked with absolute path


====== Changes from zim < 0.60 ======

== Config files ==

* ...
* Backward compatibility with files like notebook.list / repositories.list ?

== Formats ==

* Html output does no longer use "<br>" elements

== Templates ==

* Templates now use "[%-" and "-%]" to remove linebreaks around tags
* Templates no longer have a "page.heading" variable
* Html templates need css "p { white-space: pre }" to render same as zim

====== GLib and Gtk ======

Both the zim application object and the notebook objects derive from gobject
and use the gobject signal system. Only the GUI classes use gtk. So pygtk is
only a dependency when running the GUI, however python-gobject is also required 
when only running the server.

====== Parse Tree ======

Parse trees are build using the (c)ElementTree module (included in
python 2.5 as xml.etree.ElementTree). It is basically a xml structure
supporting a subset of "html like" tags.

Supported tags:

* page root element for grouping paragraphs
* p for paragraphs
* h for heading, level attribute can be 1..6
* pre for verbatim paragraphs (no further parsing in these blocks)
* em for emphasis, rendered italic by default
* strong for strong emphasis, rendered bold by default
* mark for highlighted text, renderd with background color or underlined
* strike for text that is removed, usually renderd as strike through
* code for inline verbatim text
* ul for bullet lists
* .. for checkbox lists
* li for list items
* link for links, attribute href gives the target
* img for images, attributes src, width, height an optionally href
	* any text set on these elements should be rendered as alt
	* class can be used to control plugin functionality, e.g. class=latex-equation

Unless html we respect line breaks and other whitespace as is.
When rendering as html use the "white-space: pre" CSS definition to
get the same effect.

Since elements are based on the functional markup instead of visual
markup it is not allowed to nest elements in arbitrary ways.

TODO: allow links to be nested in other elements
TODO: allow strike to have sub elements
TODO: allow classes to set hints for visual rendering and other interaction
TODO: add HR element
TODO: ol for numbered lists

If a page starts with a h1 this heading is considered the page title,
else we can fall back to the page name as title.
