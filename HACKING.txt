
====== Classes ======

Each class has inline documentation, use pydoc to view it.
The tree below is only a summary, run "dev/class_tree.py" to see
the full tree.

zim
|-- NotebookInterface() # Code for commandline export etc.
|-- gui             # Gtk interface
|   |-- GtkInterface(NotebookInterface)
|   |-- gtkutils
|   |-- pageview
|   |   |-- PageView()
|   |   |-- TextView
|   |   `-- TextBuffer
|   `-- pageindex
|       ` PageIndex()
|-- www             # WWW interface, both server and cgi-bin
|   |-- WWWInterface(NotebookInterface)
|	`-- Server()
|-- notebook
|   |-- Notebook()
|   |-- Page()
|   `-- Namespace()
|-- stores          # Data backends for notebooks
|   |-- files
|   |-- gjots
|   `-- memory
|-- templates
|   `-- Template()
|-- formats         # Parsers for various source formats
|   |-- html
|   |-- plain
|   `-- wiki
|-- fs              # File system objects
|   |-- Path()
|   |-- File(Path)
|   |-- Dir(Path)
|   `-- Buffer(StringIO)
`-- utils			# Coding utilities

Both gtk and www interfaces inherit from the Interface class defined
in zim. This class takes care of loading configuration files, plugins etc.

The Notebook object takes care of accessing and storing pages and
other data in the notebook. Each notebook can consist of one or more
store objects which implement the actual data backend. E.g. the 'files' store
implements storing wiki pages a text files in a directory structure.

Parsing of wiki syntax and other import / export formats is handled by
modules in the 'formats' directory. These use a common parse tree structure
to represent a single page.

Both the zim interface class and the notebook class derive from gobject
and use the gobject signal system. Only the GUI classes use gtk. So pygtk is
only a dependency when running the GUI, however python-gobject is also required
when only running the server.

==== Coding style ====

See the python style guide for best practices. Some items to keep in mind:

* GUI classes are only allowed to construct widgets and wire signals.
  Any actual manipulation of pages, notebooks etc. should go elsewhere.
* Signal handlers have a method name starting with "do_"
* Use "assert" for checks that could be removed when code is stable
* Do not rely on __doc__ on run time, this data could be optimized away
* Have a look at zim.utils for common code snippets

Other general guidelines:
* Writing test cases is good, full test coverage is better.
  Run "./test.py --cover" to get a coverage report.
* Wait with loading modules and constructing widgets untill they are
  really needed, this should keep startup speed reasonable
* Try to do slow operations in the gui using the idle event, e.g loading
  the side pane index or a list with search results


====== TODO ======

**Grep for TODO and FIXME tags in the code**

== General health ==

* how to pacakge zim executable (zim.py) and zim/ directory ?
* Make zim.py also accept files as notebook types (e.g. gjots, .tar.gz etc)
* Wrapper for coverage.py to generate dir with html highlighting

== Getting server up and running ==

* Finish GUI for stopping / starting the server
* Resolving files
	* Needs testing + testing for new FS methods
	* Needs security mode for www
* Resolving pages
	* Need test for Notebook.resolve_page() with lots of scenarios
* Templates need setting to remove title from tree
	* Used e.g. in Presentation template to put title in separate bar
* Templates need setting for line-ending with/without <br>
* Templates need setting to change the heading level
	* need test for ParseTree.cleanup_headings()
* Expose page properties in template and set a pagetype property for index pages
* For S5 template need to split body on H1 or HR
	* FOREACH slide IN page.sections
	* want to be able to cleanup headings per slide...
* Implement checkbox lists
* Backward compatibility with older zim versions
    * Wiki pages without headers use indented paragraphs for Verbatim
	* Resolve file should also check same dir as page source
* Check client hostname and add a --public option (default localhost only)
* Search interface ?

=== file links for www ===

When serving:
* attachments should be served - link needs to be from server root
* files under doc root (if any) should be served - idem
* all other files get linked as file:/// urls

When exporting:
* attachments should be copied - link should be reative file path from html file
* doc root never needs to be copied, absolute path or use doc_root url setting
* other files maybe copied or linked with absolute path

== Towards full capabilities ==

* Finish main GUI
* Implement moving pages
	* Logic for updating links
	* Include sub pages and attachments
* Latex Dumper
* Txt2tags Parser (and Dumper ?) class
    * Plugin to use txt2tags for multitude of output formats
* Notebook cache based on sqlite
    * Make sure to test all store backends both with and without cache
    * Make sure not to auto-vivicate cache to quickly
* Store type for reading from .tar.gz files


== Get a self hosting documentation browser ==

For example './zim.py zim/' should show all modules and classes in the treeview
clicking a page should show API documentation. Using the xdot view should show
relations between classes.

* Store that generates pydoc like output for a python source file
* Commandline option to force default store ?
* Link types to distinguise inheritance and collaboration


====== Changes from zim < 0.42 ======

We depend on Gtk+ >= 2.6 instead of >= 2.4

== Config files ==

* ...
* Backward compatibility with files like notebook.list / repositories.list ?
* Removed profile options - use different XDG dirs if needed

== Templates ==

* Templates now use "[%-" and "-%]" to remove linebreaks around tags
* Templates no longer have a "page.heading" variable
* Html templates need css "p { white-space: pre }" to render same as zim

---------------

== File format ==

Header for mtime in pages causes conflicts when merging versions :S
Get rid of all headers except the content-type line defining a zim version.

Move to a new extension (.wkz ?) and assign the proper mimetype and icon.
Move notebook.zim to hidden ".notebook.zim" (not in .zim dir - .zim should
be ignored when versioning).
Add zim format version to notebook as well. When we detect older version
< 0.42, prompt user to upgrade the notebook to new format and move the files
around. Do automated backup first! Do we need to keep backward compat mode ??

( Code to store the tar.gz backup can be used as well for e.g. for a
backup plugin, or to publish read-only notebooks. )

== Locking ==

Do not use mtime or lock, even mtime fails on network drives.
Use lock directory (similar to bzr) and if locked prompt user
to break lock or open read-only. If detected that other
process broke lock, warn user and switch to read-only.

Assume single user usage, so this is only prevention.
For multi-user setups need network client etc.

== mtime stuff ==

After reading a page get the mtime and keep the original raw file in memory.
When at writing timestamps do not match, calculate md5 of original in memory
and of the file on disk. Only prompt user if md5 sums really do not match.
This makes us more reliable for network file systems etc.

== file buffers ==

The idea to read /write diretly from and to files from e.g. a format was
a pre-mature optimalization. Adapt the Buffer object to be a in-memory buffer
of an existing file. Pass file data around in memory after reading.

== Daemon ==

Same daemon architecture as we have now. However need to maintain interface
type for clients, so server and gui can have same notebook open.
Need daemonclient object class and interfaceclient class.
Also need a stub daemon class for stand alone and testing.

== Network client ==

If we want to run a network version and decide to fix all the related
concurency and authentication stuff the proper way would be to extend the
server with the needed interfaces. E.g. plain source pages and an SQL
query interface with some plain text result page.

