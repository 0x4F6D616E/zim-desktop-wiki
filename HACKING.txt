
====== Classes ======

Each class has inline documentation, use pydoc to view it.

zim					# Command line parsing and application class
|-- Application()
|-- Component()
|-- gui				# Gtk interface - TODO
|   |-- GtkApplication(Application)
|   |-- gtkutils
|   |-- pageview
|   |   |-- PageView(Component)
|   |   |-- TextView
|   |   `-- TextBuffer
|   `-- pageindex
|       ` PageIndex(Component)
|-- www				# WWW interface for server / cgi-bin
|   `-- WWW(Application)
|-- exporter		# Code for commandline export
|   `-- Exporter(Application)
|-- notebook		# Interface to a single notebook
|   |-- Notebook()
|   |-- Page()
|   `-- Namespace()
|-- stores			# Data backends for notebooks
|   |-- files
|   |-- gjots
|   `-- memory
|-- templates
|   `-- Template()
|-- formats			# Parsers for various source formats
|   |-- html
|   |-- plain
|   `-- wiki
|-- fs				# File system objects
|   |-- Path()
|   |-- File(Path)
|   |-- Dir(Path)
|   `-- Buffer(StringIO)
`-- utils			# Coding utilities

Both gui and www inherit from the application class defined in zim.
This class takes care of loading configuration files, plugins etc.

The Notebook object takes care of accessing and storing pages and
other data in the notebook. Each notebook can consist of one or more
store objects which implement the actual data backend. E.g. the 'files' store
implements storing wiki pages a text files in a directory structure.

Parsing of wiki syntax and other import / export formats is handled by
modules in the 'formats' directory. These use a common parse tree structure
to represent a single page.

Both the zim application object and the notebook objects derive from gobject
and use the gobject signal system. Only the GUI classes use gtk. So pygtk is
only a dependency when running the GUI, however python-gobject is also required
when only running the server.

==== Coding style ====

See the python style guide for best practices. Some items to keep in mind:

* Have a look at zim.utils for common code snippets
* All signal handlers have a method name starting with "do_"
* Use "assert" for checks that could be removed when code is stable
* Do not rely on __doc__ on run time, this data could be optimized away

Other general guidelines:
* Writing test cases is good, full test coverage is better - try ./test.py --cover
* Wait with loading modules and constructing widgets untill they are
  really needed, this should keep startup speed reasonable
* Try to do slow operations in the gui using the idle event, e.g loading
  the side pane index or a list with search results


====== TODO ======

**Grep for TODO and FIXME tags in the code**

== General health ==

* how to pacakge zim executable (zim.py) and zim/ directory ?
* Make zim.py also accept files as notebook types (e.g. gjots, .tar.gz etc)
* Wrapper for coverage.py to generate dir with html highlighting

== Getting server up and running ==

* Resolving files
	* Needs testing + testing for new FS methods
	* Needs security mode for www
* Resolving pages
	* Need test for Notebook.resolve_page() with lots of scenarios
* Templates need setting to remove title from tree
	* Used e.g. in Presentation template to put title in separate bar
* Templates need setting to change the heading level
	* need test for ParseTree.cleanup_headings()
* For S5 template need to split body on H1 or HR
	* FOREACH slide IN page.sections
	* want to be able to cleanup headings per slide...
* Base class for both gui and www which takes care of config, plugins etc.
	* Also use this in zim.py when exporting etc.
	* Have objects for config sets like preferences and notebook state
	* Does a method like "data_dirs" also belong here ? No - control through env
* Event framework, both for application and notebook - needed for plugins
* Check client hostname and add a --public option (default localhost only)
* Implement editing from www (default is read-only)
* Search interface ?

== Towards full capabilities ==

* parse List nodes into parse tree
	* Implement checkbox lists
* Implement moving pages
	* Logic for updating links
	* Include sub pages and attachments
* Backward compatibility with older zim versions
    * Wiki pages without headers use indented paragraphs for Verbatim
	* Resolve file should also check same dir as page source
* Txt2tags Parser (and Dumper ?) class
    * Plugin to use txt2tags for multitude of output formats
* Notebook cache based on sqlite
    * Make sure to test all store backends both with and without cache
    * Make sure not to auto-vivicate cache to quickly
* Store type for reading from .tar.gz files

* GUI to control server, access from tools menu

* Get rid of profiles
	* use different XDG dirs if needed
	* have default config files for notebooks to choose from

=== file links for www ===

When serving:
* attachments should be served - link needs to be from server root
* files under doc root (if any) should be served - idem
* all other files get linked as file:/// urls

When exporting:
* attachments should be copied - link should be reative file path from html file
* doc root never needs to be copied, absolute path or use doc_root url setting
* other files maybe copied or linked with absolute path


====== Changes from zim < 0.60 ======

We depend on Gtk+ >= 2.6 instead of >= 2.4

== Config files ==

* ...
* Backward compatibility with files like notebook.list / repositories.list ?

== Formats ==

* Html output does no longer use "<br>" elements

== Templates ==

* Templates now use "[%-" and "-%]" to remove linebreaks around tags
* Templates no longer have a "page.heading" variable
* Html templates need css "p { white-space: pre }" to render same as zim
